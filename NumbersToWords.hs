module NumbersToWords
where

wordnum :: (Eq a, Integral a, Show a) => a -> String
wordnum  1 = "one"
wordnum  2 = "two"
wordnum  3 = "three"
wordnum  4 = "four"
wordnum  5 = "five"
wordnum  6 = "six"
wordnum  7 = "seven"
wordnum  8 = "eight"
wordnum  9 = "nine"
wordnum 10 = "ten"
wordnum 11 = "eleven"
wordnum 12 = "twelve"
wordnum 13 = "thirteen"
wordnum 14 = "fourteen"
wordnum 15 = "fifteen"
wordnum 16 = "sixteen"
wordnum 17 = "seventeen"
wordnum 18 = "eighteen"
wordnum 19 = "ninteen"
wordnum 20 = "twenty"
wordnum 30 = "thirty"
wordnum 40 = "forty"
wordnum 50 = "fifty"
wordnum 60 = "sixty"
wordnum 70 = "seventy"
wordnum 80 = "eighty"
wordnum 90 = "ninty"
wordnum  x = show x

cardinal :: (Eq a, Integral a, Show a) => a -> String
cardinal  1 = "first"
cardinal  2 = "second"
cardinal  3 = "third"
cardinal  4 = "fourth"
cardinal  5 = "fifth"
cardinal  6 = "sixth"
cardinal  7 = "seventh"
cardinal  8 = "eighth"
cardinal  9 = "ninth"
cardinal 10 = "tenth"
cardinal 11 = "eleventh"
cardinal 12 = "twelfth"
cardinal 13 = "thirteenth"
cardinal 14 = "fourteenth"
cardinal 15 = "fifteenth"
cardinal 16 = "sixteenth"
cardinal 17 = "seventeenth"
cardinal 18 = "eighteenth"
cardinal 19 = "ninteenth"
cardinal 20 = "twentieth"
cardinal 30 = "thirtieth"
cardinal 40 = "fortieth"
cardinal 50 = "fiftieth"
cardinal 60 = "sixtieth"
cardinal 70 = "seventieth"
cardinal 80 = "eightieth"
cardinal 90 = "nintieth"
cardinal x | x < 100 = wordnum (highpart x) ++ "-" ++ cardinal (lowpart x)
           | lowpart x == 1 = show x ++ "st"
           | lowpart x == 2 = show x ++ "nd"
           | lowpart x == 3 = show x ++ "rd"
           | otherwise = show x ++ "th"
   where
      lowpart  n = n `mod` 10 
      highpart n = n - (n `mod` 10)
